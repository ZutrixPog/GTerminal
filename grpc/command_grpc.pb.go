// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc/command.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TerminalClient is the client API for Terminal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerminalClient interface {
	Run(ctx context.Context, opts ...grpc.CallOption) (Terminal_RunClient, error)
	SignIn(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Token, error)
}

type terminalClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminalClient(cc grpc.ClientConnInterface) TerminalClient {
	return &terminalClient{cc}
}

func (c *terminalClient) Run(ctx context.Context, opts ...grpc.CallOption) (Terminal_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &Terminal_ServiceDesc.Streams[0], "/command.Terminal/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &terminalRunClient{stream}
	return x, nil
}

type Terminal_RunClient interface {
	Send(*Command) error
	Recv() (*Command, error)
	grpc.ClientStream
}

type terminalRunClient struct {
	grpc.ClientStream
}

func (x *terminalRunClient) Send(m *Command) error {
	return x.ClientStream.SendMsg(m)
}

func (x *terminalRunClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *terminalClient) SignIn(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/command.Terminal/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminalServer is the server API for Terminal service.
// All implementations must embed UnimplementedTerminalServer
// for forward compatibility
type TerminalServer interface {
	Run(Terminal_RunServer) error
	SignIn(context.Context, *Credentials) (*Token, error)
	mustEmbedUnimplementedTerminalServer()
}

// UnimplementedTerminalServer must be embedded to have forward compatible implementations.
type UnimplementedTerminalServer struct {
}

func (UnimplementedTerminalServer) Run(Terminal_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedTerminalServer) SignIn(context.Context, *Credentials) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedTerminalServer) mustEmbedUnimplementedTerminalServer() {}

// UnsafeTerminalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerminalServer will
// result in compilation errors.
type UnsafeTerminalServer interface {
	mustEmbedUnimplementedTerminalServer()
}

func RegisterTerminalServer(s grpc.ServiceRegistrar, srv TerminalServer) {
	s.RegisterService(&Terminal_ServiceDesc, srv)
}

func _Terminal_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TerminalServer).Run(&terminalRunServer{stream})
}

type Terminal_RunServer interface {
	Send(*Command) error
	Recv() (*Command, error)
	grpc.ServerStream
}

type terminalRunServer struct {
	grpc.ServerStream
}

func (x *terminalRunServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func (x *terminalRunServer) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Terminal_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Terminal/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServer).SignIn(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

// Terminal_ServiceDesc is the grpc.ServiceDesc for Terminal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Terminal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.Terminal",
	HandlerType: (*TerminalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _Terminal_SignIn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Terminal_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/command.proto",
}
